{"version":3,"sources":["webpack:///./src/constants/general.js","webpack:///./src/components/_shared/components/Button.js","webpack:///./src/components/pages/dashboard/DashboardContext.js","webpack:///./src/components/_shared/components/StyledCard.js","webpack:///./src/services/_cryptosApi.js","webpack:///./src/constants/cryptocurrencies.js","webpack:///./src/services/cryptosService.js","webpack:///./src/components/_shared/components/PageLoader.js","webpack:///./src/services/paymentService.js","webpack:///./src/components/pages/investment/InvestmentsResultsContext.js","webpack:///./src/components/_shared/components/Accordion.js","webpack:///./src/components/_shared/components/CardListDetails.js","webpack:///./src/components/_shared/components/CardListStock.js","webpack:///./src/components/_shared/components/CardListCrypto.js","webpack:///./src/components/_shared/components/Table.js","webpack:///./src/components/pages/investment/BuyInvestmentComponent.js","webpack:///./src/components/pages/investment/InvestmentsResultsComponent.js"],"names":["CRYPTOCURRENCY","STOCK","WhiteCircularProgress","withStyles","theme","root","color","position","width","height","CircularProgress","StyledButton","fontWeight","borderRadius","textAlign","minHeight","marginLeft","spacing","ButtonMui","Button","children","isLoading","buttonProps","DashboardContext","React","createContext","Provider","Consumer","Card","backgroundColor","padding","Paper","title","subtitle","cardProps","variant","className","api","axios","create","baseURL","process","headers","get","url","CRYPTO_SYMBOLS","getCryptos","a","symbols","map","crypto","cryptosApi","join","then","res","status","data","quoteResponse","result","getCryptosByList","cryptosList","PageLoader","props","left","right","top","display","justifyContent","alignItems","size","propTypes","requestPaymentCrypto","cryptoData","amount","Promise","resolve","setTimeout","success","symbol","type","volume","regularMarketPrice","toFixed","date","Date","requestPaymentStock","stockData","quantity","last","InvestmentsResultsContext","StyledAccordion","margin","boxShadow","palette","background","cardLighter","expanded","MuiAccordion","Accordion","CardListDetails","items","Grid","container","item","i","key","xs","md","Box","py","Typography","label","value","useStyles","makeStyles","quantityStock","CardListStock","itemsList","classes","useState","setExpanded","setQuantityStock","handleQuantityStock","stockValue","operation","buyInvestment","isPaymentLoading","onChange","panel","event","isExpanded","AccordionSummary","expandIcon","AccordionDetails","low","high","open","toLocaleString","IconButton","onClick","fullWidth","CardListCrypto","table","minWidth","fromCurrency","shortName","regularMarketDayLow","regularMarketDayHigh","regularMarketChangePercent","BuyInvestmentComponent","resultsRoot","InvestmentsResultsComponent","clearResults","resultsData","Slide","in","direction","mb","StyledCard","stocksData","length","listType","cryptosData"],"mappings":"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","file":"5.7df1e3a7b5c7ee679dcf.js","sourcesContent":["export const CRYPTOCURRENCY = \"CRYPTOOPTION\";\r\nexport const STOCK = \"STOCKOPTION\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Button as ButtonMui,\r\n  withStyles,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\n\r\nconst WhiteCircularProgress = withStyles((theme) => ({\r\n  root: {\r\n    color: \"#fff\",\r\n    position: \"absolute\",\r\n    width: \"20px !important\",\r\n    height: \"20px !important\",\r\n  },\r\n}))(CircularProgress);\r\n\r\nconst StyledButton = withStyles((theme) => ({\r\n  root: {\r\n    fontWeight: 600,\r\n    borderRadius: \"40px\",\r\n    textAlign: \"center\",\r\n    color: \"#fff\",\r\n    minHeight: 50,\r\n\r\n    \"& .MuiSvgIcon-root\": {\r\n      width: 18,\r\n      marginLeft: theme.spacing(1),\r\n    },\r\n  },\r\n}))(ButtonMui);\r\n\r\nconst Button = ({ children, isLoading, ...buttonProps }) => {\r\n  return (\r\n    <StyledButton {...buttonProps}>\r\n      {isLoading ? <WhiteCircularProgress /> : <>{children}</>}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\nconst DashboardContext = React.createContext({});\r\nexport const DashboardProvider = DashboardContext.Provider;\r\nexport const DashboardConsumer = DashboardContext.Consumer;\r\n\r\nexport default DashboardContext;","import React from 'react';\r\nimport { Paper, Typography, withStyles } from '@material-ui/core';\r\n\r\n const Card = withStyles(theme => ({\r\n  root: {\r\n    backgroundColor: '#3A4361',\r\n    borderRadius: 30,\r\n    padding: theme.spacing(3),\r\n  }\r\n}))(Paper);\r\n\r\nexport default ({\r\n  title, \r\n  subtitle, \r\n  children, \r\n  ...cardProps\r\n}) => (\r\n  <Card {...cardProps}>\r\n    {title && <Typography variant={'body1'} className={'title'}>{title}</Typography>}\r\n    {subtitle && <Typography variant={'body2'} className={'subtitle'}>{subtitle}</Typography>}\r\n    \r\n    {children}\r\n  </Card>\r\n);\r\n","import axios from \"axios\";\r\n\r\nconst API_URL = process.env.CRYPTO_API;\r\nconst API_KEY = process.env.CRYPTO_API_KEY;\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: { \r\n    \"Content-Type\": \"application/json\", \r\n    \"X-RapidAPI-Host\": \"apidojo-yahoo-finance-v1.p.rapidapi.com\",\r\n    \"X-RapidAPI-Key\": API_KEY\r\n  },\r\n});\r\n\r\nconst get = url => api.get(`${url}&region=US`);\r\n\r\nexport { get };\r\n","export const CRYPTO_SYMBOLS = ['BTC', 'ETH', 'USDT', 'XRP', 'BCH', 'BNB'];","import * as cryptosApi from \"./_cryptosApi\";\r\nimport { CRYPTO_SYMBOLS } from \"../constants/cryptocurrencies\";\r\n\r\nexport const getCryptos = async () => {\r\n  const symbols = CRYPTO_SYMBOLS.map(crypto => `${crypto}-USD`);\r\n  return cryptosApi\r\n    .get(`market/v2/get-quotes?symbols=${symbols.join('%252C')}`)\r\n    .then(res => {\r\n      if(res.status === 200) {\r\n        return res.data.quoteResponse.result;\r\n      }\r\n    });\r\n};\r\n\r\nexport const getCryptosByList = async cryptosList => {\r\n  return cryptosApi\r\n    .get(`market/v2/get-quotes?symbols=${cryptosList.join('%252C')}`)\r\n    .then(res => {\r\n      if(res.status === 200) {\r\n        return res.data.quoteResponse.result;\r\n      }\r\n    });\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Box, CircularProgress } from \"@material-ui/core\";\r\n\r\nconst PageLoader = (props) => {\r\n  return (\r\n    <Box\r\n      position={\"absolute\"}\r\n      left={0}\r\n      right={0}\r\n      top={0}\r\n      display={\"flex\"}\r\n      justifyContent={\"center\"}\r\n      alignItems={\"center\"}\r\n      width={\"100%\"}\r\n      height={\"100vh\"}\r\n    >\r\n      <CircularProgress size={50} />\r\n          \r\n    </Box>\r\n  );\r\n};\r\n\r\nPageLoader.propTypes = {};\r\n\r\nexport default PageLoader;\r\n","import { CRYPTOCURRENCY, STOCK } from \"../constants/general\";\r\n\r\nexport const requestPaymentCrypto = async (cryptoData, amount) => {\r\n  await new Promise((resolve) => setTimeout(resolve, 2000)); //fake loading payment\r\n  return {\r\n    success: true,\r\n    data: {\r\n      symbol: cryptoData.symbol,\r\n      type: CRYPTOCURRENCY,\r\n      volume: (amount / cryptoData.regularMarketPrice).toFixed(6),\r\n      amount: amount,\r\n      date: new Date(),\r\n    }\r\n  };\r\n};\r\n\r\nexport const requestPaymentStock = async (stockData, quantity) => {\r\n  await new Promise((resolve) => setTimeout(resolve, 2000)); //fake loading payment\r\n  return {\r\n    success: true,\r\n    data: {\r\n      symbol: stockData.symbol,\r\n      type: STOCK,\r\n      volume: quantity,\r\n      amount: quantity * stockData.last,\r\n      date: new Date(),\r\n    }\r\n  };\r\n};\r\n","import React from 'react';\r\n\r\nconst InvestmentsResultsContext = React.createContext({});\r\nexport const InvestmentsResultsProvider = InvestmentsResultsContext.Provider;\r\nexport const InvestmentsResultsConsumer = InvestmentsResultsContext.Consumer;\r\n\r\nexport default InvestmentsResultsContext;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Accordion as MuiAccordion,\r\n  AccordionDetails,\r\n  AccordionSummary as MuiAccordionSummary,\r\n\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\n\r\nconst StyledAccordion = withStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"transparent\",\r\n    margin: `${theme.spacing(1)}px`,\r\n    boxShadow: \"none\",\r\n    borderRadius: `${theme.spacing(3)}px !important`,\r\n\r\n    \"&:before\": {\r\n      display: \"none\",\r\n    },\r\n    \"&$expanded\": {\r\n      boxShadow: \"0 0 12px 8px rgb(0 0 0 / 7%);\",\r\n    },\r\n    \"&.even\": {\r\n      backgroundColor: theme.palette.background.cardLighter,\r\n    },\r\n  },\r\n  expanded: {\r\n    boxShadow: \"0 0 3px -3px rgba(0,0,0,.05)\",\r\n  },\r\n}))(MuiAccordion);\r\n\r\nconst Accordion = ({ children, ...props }) => (\r\n  <StyledAccordion {...props}>{children}</StyledAccordion>\r\n);\r\n\r\nexport default Accordion;\r\n","import { Box, Grid, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst CardListDetails = ({ items }) => (\r\n  <Grid container>\r\n    {items.map((item, i) => (\r\n      <Grid key={i} item xs={6} md={3}>\r\n        <Box minHeight={100} py={2}>\r\n          <Typography variant={\"body2\"}>{item.label}</Typography>\r\n          <Typography variant={\"body1\"}>{item.value}</Typography>\r\n        </Box>\r\n      </Grid>\r\n    ))}\r\n  </Grid>\r\n);\r\n\r\nexport default CardListDetails;","import React, { useState } from \"react\";\r\nimport {\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  Box,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport InvestmentsResultsContext from \"../../pages/investment/InvestmentsResultsContext\";\r\nimport Button from \"./Button\";\r\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\r\nimport Accordion from \"./Accordion\";\r\nimport CardListDetails from \"./CardListDetails\";\r\nimport DashboardContext from \"../../pages/dashboard/DashboardContext\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { STOCK } from \"../../../constants/general\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  quantityStock: {},\r\n}));\r\n\r\nconst CardListStock = ({ itemsList }) => {\r\n  const classes = useStyles();\r\n\r\n  const [expanded, setExpanded] = React.useState(false);\r\n  const [quantityStock, setQuantityStock] = React.useState(1);\r\n\r\n  const handleChange = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n    setQuantityStock(1);\r\n  };\r\n\r\n  const handleQuantityStock = (stockValue, operation, amount) => {\r\n    if (operation === \"add\") {\r\n      if (stockValue * (quantityStock + 1) <= amount) {\r\n        setQuantityStock(quantityStock + 1);\r\n      }\r\n    } else {\r\n      setQuantityStock(quantityStock - 1 > 0 ? quantityStock - 1 : 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DashboardContext.Consumer>\r\n      {({ buyInvestment, isPaymentLoading }) => (\r\n        <InvestmentsResultsContext.Consumer>\r\n          {({ amount }) => (\r\n            <>\r\n              {itemsList.map((item, i) => (\r\n                <Accordion\r\n                  key={i}\r\n                  className={i % 2 ? \"even\" : \"odd\"}\r\n                  expanded={expanded === i}\r\n                  onChange={handleChange(i)}\r\n                >\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Grid container>\r\n                      <Grid item xs={3}>\r\n                        <Typography variant={\"body1\"}>{item.symbol}</Typography>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={3}>\r\n                        <Typography variant={\"body2\"}>\r\n                          ${item.last.toFixed(2)}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Box py={2} width={\"100%\"}>\r\n                      <CardListDetails\r\n                        items={[\r\n                          { label: \"Day low\", value: item.low },\r\n                          { label: \"Day high\", value: item.high },\r\n                          { label: \"Day open\", value: item.open },\r\n                          {\r\n                            label: \"Date\",\r\n                            value: new Date(item.date).toLocaleString(\"en-US\"),\r\n                          },\r\n                        ]}\r\n                      />\r\n\r\n                      <Grid container>\r\n                        <Grid item xs={6} md={3}>\r\n                          <Box>\r\n                            {amount / item.last > 1 && (\r\n                              <Box className={classes.quantityStock}>\r\n                                <IconButton\r\n                                  onClick={() =>\r\n                                    handleQuantityStock(\r\n                                      item.last,\r\n                                      \"remove\",\r\n                                      amount\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  <RemoveIcon />\r\n                                </IconButton>\r\n                                <Typography variant={\"body2\"}>\r\n                                  {quantityStock}\r\n                                </Typography>\r\n                                <IconButton\r\n                                  onClick={() =>\r\n                                    handleQuantityStock(\r\n                                      item.last,\r\n                                      \"add\",\r\n                                      amount\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  <AddIcon />\r\n                                </IconButton>\r\n                              </Box>\r\n                            )}\r\n                          </Box>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={9}>\r\n                          <Button\r\n                            variant={\"contained\"}\r\n                            color={\"primary\"}\r\n                            fullWidth\r\n                            isLoading={isPaymentLoading}\r\n                            className={\"\"}\r\n                            size={\"small\"}\r\n                            onClick={() => buyInvestment(item, amount, STOCK, quantityStock,)}\r\n                          >\r\n                            INVEST $ {(quantityStock * item.last).toFixed(2)} NOW <MonetizationOnIcon />\r\n                          </Button>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Box>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n              ))}\r\n            </>\r\n          )}\r\n        </InvestmentsResultsContext.Consumer>\r\n      )}\r\n    </DashboardContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default CardListStock;\r\n","import React from \"react\";\r\nimport {\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  Box,\r\n  Grid,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport InvestmentsResultsContext from \"../../pages/investment/InvestmentsResultsContext\";\r\nimport Button from \"./Button\";\r\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\r\nimport Accordion from \"./Accordion\";\r\nimport Table from \"./Table\";\r\nimport DashboardContext from \"../../pages/dashboard/DashboardContext\";\r\nimport { CRYPTOCURRENCY } from \"../../../constants/general\";\r\nimport CardListDetails from \"./CardListDetails\";\r\n\r\nconst CardListCrypto = ({ itemsList }) => {\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleChange = (panel) => (event, isExpanded) =>\r\n    setExpanded(isExpanded ? panel : false);\r\n\r\n  return (\r\n    <DashboardContext.Consumer>\r\n      {({ buyInvestment, isPaymentLoading }) => (\r\n        <InvestmentsResultsContext.Consumer>\r\n          {({ amount }) => (\r\n            <>\r\n              {itemsList.map((item, i) => (\r\n                <Accordion\r\n                  key={i}\r\n                  className={i % 2 ? \"even\" : \"odd\"}\r\n                  expanded={expanded === i}\r\n                  onChange={handleChange(i)}\r\n                >\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Grid container>\r\n                      <Grid item xs={3}>\r\n                        <Typography variant={\"body1\"}>\r\n                          {item.fromCurrency}\r\n                        </Typography>\r\n                        <Typography variant={\"body2\"}>\r\n                          {item.shortName}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item xs={3}></Grid>\r\n                      <Grid item xs={3}>\r\n                        {(amount / item.regularMarketPrice).toFixed(6)}\r\n                      </Grid>\r\n                    </Grid>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Box py={2} width={\"100%\"}>\r\n                      <CardListDetails items={[\r\n                        { label: \"Day low\", value: item.regularMarketDayLow.toFixed(2) },\r\n                        { label: \"Day high\", value: item.regularMarketDayHigh.toFixed(2) },\r\n                        { label: \"Market change (%)\", value: item.regularMarketChangePercent.toFixed(2) },\r\n                        { label: \"Price\", value: item.regularMarketPrice.toFixed(2) },\r\n                      ]} />\r\n\r\n                      <Box>\r\n                        <Button\r\n                          variant={\"contained\"}\r\n                          color={\"primary\"}\r\n                          fullWidth\r\n                          isLoading={isPaymentLoading}\r\n                          className={\"\"}\r\n                          size={\"small\"}\r\n                          onClick={() => buyInvestment(item, amount, CRYPTOCURRENCY)}\r\n                        >\r\n                          BUY NOW $ {amount} <MonetizationOnIcon />\r\n                        </Button>\r\n                      </Box>\r\n                    </Box>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n              ))}\r\n            </>\r\n          )}\r\n        </InvestmentsResultsContext.Consumer>\r\n      )}\r\n    </DashboardContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default CardListCrypto;\r\n","import {\r\n  Box,\r\n  makeStyles,\r\n  TableContainer,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nconst Table =  props => {\r\n  const classes = useStyles();\r\n  return (\r\n    <TableContainer component={Box}>\r\n      <Table className={classes.table}>{props.children}</Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BuyInvestmentComponent = props => {\r\n  return (\r\n    <>\r\n      {/* TODO */}\r\n    </>\r\n  );\r\n}\r\n\r\nBuyInvestmentComponent.propTypes = {\r\n\r\n}\r\n\r\nexport default BuyInvestmentComponent;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Box, Grid, Grow, IconButton, makeStyles, Slide, Typography } from \"@material-ui/core\";\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nimport { getCryptos } from \"../../../services/cryptosService\";\r\nimport StyledCard from \"../../_shared/components/StyledCard\";\r\nimport PageLoader from \"../../_shared/components/PageLoader\";\r\nimport { CRYPTOCURRENCY, STOCK } from \"../../../constants/general\";\r\nimport InvestmentsResultsContext from \"./InvestmentsResultsContext\";\r\nimport CardListStock from \"../../_shared/components/CardListStock\";\r\nimport CardListCrypto from \"../../_shared/components/CardListCrypto\";\r\nimport BuyInvestmentComponent from \"./BuyInvestmentComponent\";\r\nimport { requestPayment } from \"../../../services/paymentService\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  resultsRoot: {\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    width: '100%',\r\n    height: '100vh',\r\n    padding: theme.spacing(4),\r\n    backgroundColor: theme.palette.background.default\r\n  }\r\n}));\r\n\r\nconst InvestmentsResultsComponent = ({\r\n  clearResults,\r\n  resultsData,\r\n  amount\r\n}) => {\r\n  if (!resultsData) return <PageLoader />;\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Box className={classes.resultsRoot}>\r\n      <Box\r\n        position={\"absolute\"}\r\n        right={20}\r\n        top={20}\r\n        onClick={() => clearResults()}\r\n      >\r\n        <IconButton>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </Box>\r\n\r\n      <InvestmentsResultsContext.Provider value={{ amount: resultsData.amount }}>\r\n        <Slide in={true} direction={\"up\"}>\r\n          <Box>\r\n            <Box mb={5}>\r\n              <Grid container alignItems={\"center\"}>\r\n                <Grid item xs={12} md={5}>\r\n                  <Typography variant={\"body2\"}>\r\n                    home // investing // ${amount}\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={6} md={2}>\r\n                  <Box textAlign={\"center\"}>\r\n                    <Typography variant={\"h3\"}>\r\n                      Finding the best invesment\r\n                    </Typography>\r\n                    <Typography variant={\"body2\"}>\r\n                      According to your profile and how much you would like to\r\n                      invest we think these are the best results.\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n\r\n                <Grid item xs={6} md={5}></Grid>\r\n              </Grid>\r\n            </Box>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <StyledCard title={\"Stocks\"}>\r\n                  {resultsData.stocksData.length ? (\r\n                    <CardListStock listType={STOCK} itemsList={resultsData.stocksData} />\r\n                  ) : (\r\n                    <Box py={2}>\r\n                      <Typography variant={\"body2\"}>\r\n                        Oops! We couldn't find any stock for your investment. Would\r\n                        your consider increase the investmen?\r\n                      </Typography>\r\n                    </Box>\r\n\r\n                  )}\r\n                </StyledCard>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <StyledCard title={\"Cryptocurrencies\"}>\r\n                  {resultsData.cryptosData.length ? (\r\n                    <CardListCrypto listType={CRYPTOCURRENCY} itemsList={resultsData.cryptosData} />\r\n                    ) : (\r\n                      <Box py={2}>\r\n                        <Typography variant={\"body2\"}>\r\n                          Oops! We couldn't find any cryptocurrency for your investment. Would\r\n                          you mind trying back later?\r\n                        </Typography>\r\n                      </Box>\r\n                    )}\r\n                </StyledCard>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Slide>\r\n      </InvestmentsResultsContext.Provider>\r\n    </Box>\r\n  );\r\n};\r\n\r\nInvestmentsResultsComponent.propTypes = {};\r\n\r\nexport default InvestmentsResultsComponent;\r\n"],"sourceRoot":""}